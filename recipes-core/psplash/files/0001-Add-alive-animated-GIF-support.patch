From 896550cb79b2b5aa497b32d509dde6ce0aef8087 Mon Sep 17 00:00:00 2001
From: MagneFire <IDaNLContact@gmail.com>
Date: Tue, 9 Nov 2021 15:00:13 +0100
Subject: [PATCH] Add alive animated GIF support.

Upstream-Status: Inappropriate [hybris specific]

---
 Makefile.am     |   2 +
 configure.ac    |   8 +
 gifdec.c        | 513 ++++++++++++++++++++++++++++++++++++++++++++++++
 gifdec.h        |  56 ++++++
 psplash-alive.c | 212 ++++++++++++++++++++
 psplash-alive.h |  66 +++++++
 psplash-fb.c    |   2 +-
 psplash-fb.h    |   8 +
 psplash.c       | 225 ++++++++++++++-------
 psplash.h       |   7 +
 10 files changed, 1027 insertions(+), 72 deletions(-)
 create mode 100644 gifdec.c
 create mode 100644 gifdec.h
 create mode 100644 psplash-alive.c
 create mode 100644 psplash-alive.h

diff --git a/Makefile.am b/Makefile.am
index 310e126..ce5b1f7 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -4,6 +4,8 @@ AM_CFLAGS = $(GCC_FLAGS) $(EXTRA_GCC_FLAGS) -D_GNU_SOURCE -DFONT_HEADER=\"$(FONT
 
 psplash_SOURCES = psplash.c psplash.h psplash-fb.c psplash-fb.h \
                   psplash-console.c psplash-console.h           \
+                  psplash-alive.c psplash-alive.h           \
+                  gifdec.c gifdec.h           \
 		  psplash-colors.h psplash-config.h		\
 		  psplash-poky-img.h psplash-bar-img.h $(FONT_NAME)-font.h
 BUILT_SOURCES = psplash-poky-img.h psplash-bar-img.h
diff --git a/configure.ac b/configure.ac
index 2a7da91..a7cfb15 100644
--- a/configure.ac
+++ b/configure.ac
@@ -45,6 +45,14 @@ AS_IF([test x$disable_progress_bar = xtrue], [
     EXTRA_GCC_FLAGS="$EXTRA_GCC_FLAGS -DPSPLASH_DISABLE_PROGRESS_BAR"
 ])
 
+AC_ARG_ENABLE([animated-gif],
+    AS_HELP_STRING([--enable-animated-gif], [Enable animated-gif]),
+    [enable_animated_gif=true],
+    [enable_animated_gif=false])
+AS_IF([test x$enable_animated_gif = xtrue], [
+    EXTRA_GCC_FLAGS="$EXTRA_GCC_FLAGS -DPSPLASH_ENABLE_ANIMATED_GIF"
+])
+
 AC_ARG_ENABLE([img-fullscreen],
     AS_HELP_STRING([--enable-img-fullscreen], [Enable the logo image in fullscreen mode)]),
     [img_fullscreen=true],
diff --git a/gifdec.c b/gifdec.c
new file mode 100644
index 0000000..975bca4
--- /dev/null
+++ b/gifdec.c
@@ -0,0 +1,513 @@
+#include "gifdec.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#ifdef _WIN32
+#include <io.h>
+#else
+#include <unistd.h>
+#endif
+
+#define MIN(A, B) ((A) < (B) ? (A) : (B))
+#define MAX(A, B) ((A) > (B) ? (A) : (B))
+
+typedef struct Entry {
+    uint16_t length;
+    uint16_t prefix;
+    uint8_t  suffix;
+} Entry;
+
+typedef struct Table {
+    int bulk;
+    int nentries;
+    Entry *entries;
+} Table;
+
+static uint16_t
+read_num(int fd)
+{
+    uint8_t bytes[2];
+
+    read(fd, bytes, 2);
+    return bytes[0] + (((uint16_t) bytes[1]) << 8);
+}
+
+gd_GIF *
+gd_open_gif(const char *fname)
+{
+    int fd;
+    uint8_t sigver[3];
+    uint16_t width, height, depth;
+    uint8_t fdsz, bgidx, aspect;
+    int i;
+    uint8_t *bgcolor;
+    int gct_sz;
+    gd_GIF *gif;
+
+    fd = open(fname, O_RDONLY);
+    if (fd == -1) return NULL;
+#ifdef _WIN32
+    setmode(fd, O_BINARY);
+#endif
+    /* Header */
+    read(fd, sigver, 3);
+    if (memcmp(sigver, "GIF", 3) != 0) {
+        fprintf(stderr, "invalid signature\n");
+        goto fail;
+    }
+    /* Version */
+    read(fd, sigver, 3);
+    if (memcmp(sigver, "89a", 3) != 0) {
+        fprintf(stderr, "invalid version\n");
+        goto fail;
+    }
+    /* Width x Height */
+    width  = read_num(fd);
+    height = read_num(fd);
+    /* FDSZ */
+    read(fd, &fdsz, 1);
+    /* Presence of GCT */
+    if (!(fdsz & 0x80)) {
+        fprintf(stderr, "no global color table\n");
+        goto fail;
+    }
+    /* Color Space's Depth */
+    depth = ((fdsz >> 4) & 7) + 1;
+    /* Ignore Sort Flag. */
+    /* GCT Size */
+    gct_sz = 1 << ((fdsz & 0x07) + 1);
+    /* Background Color Index */
+    read(fd, &bgidx, 1);
+    /* Aspect Ratio */
+    read(fd, &aspect, 1);
+    /* Create gd_GIF Structure. */
+    gif = calloc(1, sizeof(*gif) + 4 * width * height);
+    if (!gif) goto fail;
+    gif->fd = fd;
+    gif->width  = width;
+    gif->height = height;
+    gif->depth  = depth;
+    /* Read GCT */
+    gif->gct.size = gct_sz;
+    read(fd, gif->gct.colors, 3 * gif->gct.size);
+    gif->palette = &gif->gct;
+    gif->bgindex = bgidx;
+    gif->canvas = (uint8_t *) &gif[1];
+    gif->frame = &gif->canvas[3 * width * height];
+    if (gif->bgindex)
+        memset(gif->frame, gif->bgindex, gif->width * gif->height);
+    bgcolor = &gif->palette->colors[gif->bgindex*3];
+    if (bgcolor[0] || bgcolor[1] || bgcolor [2])
+        for (i = 0; i < gif->width * gif->height; i++)
+            memcpy(&gif->canvas[i*3], bgcolor, 3);
+    gif->anim_start = lseek(fd, 0, SEEK_CUR);
+    goto ok;
+fail:
+    close(fd);
+ok:
+    return gif;
+}
+
+static void
+discard_sub_blocks(gd_GIF *gif)
+{
+    uint8_t size;
+
+    do {
+        read(gif->fd, &size, 1);
+        lseek(gif->fd, size, SEEK_CUR);
+    } while (size);
+}
+
+static void
+read_plain_text_ext(gd_GIF *gif)
+{
+    if (gif->plain_text) {
+        uint16_t tx, ty, tw, th;
+        uint8_t cw, ch, fg, bg;
+        off_t sub_block;
+        lseek(gif->fd, 1, SEEK_CUR); /* block size = 12 */
+        tx = read_num(gif->fd);
+        ty = read_num(gif->fd);
+        tw = read_num(gif->fd);
+        th = read_num(gif->fd);
+        read(gif->fd, &cw, 1);
+        read(gif->fd, &ch, 1);
+        read(gif->fd, &fg, 1);
+        read(gif->fd, &bg, 1);
+        sub_block = lseek(gif->fd, 0, SEEK_CUR);
+        gif->plain_text(gif, tx, ty, tw, th, cw, ch, fg, bg);
+        lseek(gif->fd, sub_block, SEEK_SET);
+    } else {
+        /* Discard plain text metadata. */
+        lseek(gif->fd, 13, SEEK_CUR);
+    }
+    /* Discard plain text sub-blocks. */
+    discard_sub_blocks(gif);
+}
+
+static void
+read_graphic_control_ext(gd_GIF *gif)
+{
+    uint8_t rdit;
+
+    /* Discard block size (always 0x04). */
+    lseek(gif->fd, 1, SEEK_CUR);
+    read(gif->fd, &rdit, 1);
+    gif->gce.disposal = (rdit >> 2) & 3;
+    gif->gce.input = rdit & 2;
+    gif->gce.transparency = rdit & 1;
+    gif->gce.delay = read_num(gif->fd);
+    read(gif->fd, &gif->gce.tindex, 1);
+    /* Skip block terminator. */
+    lseek(gif->fd, 1, SEEK_CUR);
+}
+
+static void
+read_comment_ext(gd_GIF *gif)
+{
+    if (gif->comment) {
+        off_t sub_block = lseek(gif->fd, 0, SEEK_CUR);
+        gif->comment(gif);
+        lseek(gif->fd, sub_block, SEEK_SET);
+    }
+    /* Discard comment sub-blocks. */
+    discard_sub_blocks(gif);
+}
+
+static void
+read_application_ext(gd_GIF *gif)
+{
+    char app_id[8];
+    char app_auth_code[3];
+
+    /* Discard block size (always 0x0B). */
+    lseek(gif->fd, 1, SEEK_CUR);
+    /* Application Identifier. */
+    read(gif->fd, app_id, 8);
+    /* Application Authentication Code. */
+    read(gif->fd, app_auth_code, 3);
+    if (!strncmp(app_id, "NETSCAPE", sizeof(app_id))) {
+        /* Discard block size (0x03) and constant byte (0x01). */
+        lseek(gif->fd, 2, SEEK_CUR);
+        gif->loop_count = read_num(gif->fd);
+        /* Skip block terminator. */
+        lseek(gif->fd, 1, SEEK_CUR);
+    } else if (gif->application) {
+        off_t sub_block = lseek(gif->fd, 0, SEEK_CUR);
+        gif->application(gif, app_id, app_auth_code);
+        lseek(gif->fd, sub_block, SEEK_SET);
+        discard_sub_blocks(gif);
+    } else {
+        discard_sub_blocks(gif);
+    }
+}
+
+static void
+read_ext(gd_GIF *gif)
+{
+    uint8_t label;
+
+    read(gif->fd, &label, 1);
+    switch (label) {
+    case 0x01:
+        read_plain_text_ext(gif);
+        break;
+    case 0xF9:
+        read_graphic_control_ext(gif);
+        break;
+    case 0xFE:
+        read_comment_ext(gif);
+        break;
+    case 0xFF:
+        read_application_ext(gif);
+        break;
+    default:
+        fprintf(stderr, "unknown extension: %02X\n", label);
+    }
+}
+
+static Table *
+new_table(int key_size)
+{
+    int key;
+    int init_bulk = MAX(1 << (key_size + 1), 0x100);
+    Table *table = malloc(sizeof(*table) + sizeof(Entry) * init_bulk);
+    if (table) {
+        table->bulk = init_bulk;
+        table->nentries = (1 << key_size) + 2;
+        table->entries = (Entry *) &table[1];
+        for (key = 0; key < (1 << key_size); key++)
+            table->entries[key] = (Entry) {1, 0xFFF, key};
+    }
+    return table;
+}
+
+/* Add table entry. Return value:
+ *  0 on success
+ *  +1 if key size must be incremented after this addition
+ *  -1 if could not realloc table */
+static int
+add_entry(Table **tablep, uint16_t length, uint16_t prefix, uint8_t suffix)
+{
+    Table *table = *tablep;
+    if (table->nentries == table->bulk) {
+        table->bulk *= 2;
+        table = realloc(table, sizeof(*table) + sizeof(Entry) * table->bulk);
+        if (!table) return -1;
+        table->entries = (Entry *) &table[1];
+        *tablep = table;
+    }
+    table->entries[table->nentries] = (Entry) {length, prefix, suffix};
+    table->nentries++;
+    if ((table->nentries & (table->nentries - 1)) == 0)
+        return 1;
+    return 0;
+}
+
+static uint16_t
+get_key(gd_GIF *gif, int key_size, uint8_t *sub_len, uint8_t *shift, uint8_t *byte)
+{
+    int bits_read;
+    int rpad;
+    int frag_size;
+    uint16_t key;
+
+    key = 0;
+    for (bits_read = 0; bits_read < key_size; bits_read += frag_size) {
+        rpad = (*shift + bits_read) % 8;
+        if (rpad == 0) {
+            /* Update byte. */
+            if (*sub_len == 0) {
+                read(gif->fd, sub_len, 1); /* Must be nonzero! */
+                if (*sub_len == 0)
+                    return 0x1000;
+            }
+            read(gif->fd, byte, 1);
+            (*sub_len)--;
+        }
+        frag_size = MIN(key_size - bits_read, 8 - rpad);
+        key |= ((uint16_t) ((*byte) >> rpad)) << bits_read;
+    }
+    /* Clear extra bits to the left. */
+    key &= (1 << key_size) - 1;
+    *shift = (*shift + key_size) % 8;
+    return key;
+}
+
+/* Compute output index of y-th input line, in frame of height h. */
+static int
+interlaced_line_index(int h, int y)
+{
+    int p; /* number of lines in current pass */
+
+    p = (h - 1) / 8 + 1;
+    if (y < p) /* pass 1 */
+        return y * 8;
+    y -= p;
+    p = (h - 5) / 8 + 1;
+    if (y < p) /* pass 2 */
+        return y * 8 + 4;
+    y -= p;
+    p = (h - 3) / 4 + 1;
+    if (y < p) /* pass 3 */
+        return y * 4 + 2;
+    y -= p;
+    /* pass 4 */
+    return y * 2 + 1;
+}
+
+/* Decompress image pixels.
+ * Return 0 on success or -1 on out-of-memory (w.r.t. LZW code table). */
+static int
+read_image_data(gd_GIF *gif, int interlace)
+{
+    uint8_t sub_len, shift, byte;
+    int init_key_size, key_size, table_is_full;
+    int frm_off, frm_size, str_len, i, p, x, y;
+    uint16_t key, clear, stop;
+    int ret;
+    Table *table;
+    Entry entry;
+    off_t start, end;
+
+    read(gif->fd, &byte, 1);
+    key_size = (int) byte;
+    start = lseek(gif->fd, 0, SEEK_CUR);
+    discard_sub_blocks(gif);
+    end = lseek(gif->fd, 0, SEEK_CUR);
+    lseek(gif->fd, start, SEEK_SET);
+    clear = 1 << key_size;
+    stop = clear + 1;
+    table = new_table(key_size);
+    key_size++;
+    init_key_size = key_size;
+    sub_len = shift = 0;
+    key = get_key(gif, key_size, &sub_len, &shift, &byte); /* clear code */
+    frm_off = 0;
+    ret = 0;
+    frm_size = gif->fw*gif->fh;
+    while (frm_off < frm_size) {
+        if (key == clear) {
+            key_size = init_key_size;
+            table->nentries = (1 << (key_size - 1)) + 2;
+            table_is_full = 0;
+        } else if (!table_is_full) {
+            ret = add_entry(&table, str_len + 1, key, entry.suffix);
+            if (ret == -1) {
+                free(table);
+                return -1;
+            }
+            if (table->nentries == 0x1000) {
+                ret = 0;
+                table_is_full = 1;
+            }
+        }
+        key = get_key(gif, key_size, &sub_len, &shift, &byte);
+        if (key == clear) continue;
+        if (key == stop || key == 0x1000) break;
+        if (ret == 1) key_size++;
+        entry = table->entries[key];
+        str_len = entry.length;
+        for (i = 0; i < str_len; i++) {
+            p = frm_off + entry.length - 1;
+            x = p % gif->fw;
+            y = p / gif->fw;
+            if (interlace)
+                y = interlaced_line_index((int) gif->fh, y);
+            gif->frame[(gif->fy + y) * gif->width + gif->fx + x] = entry.suffix;
+            if (entry.prefix == 0xFFF)
+                break;
+            else
+                entry = table->entries[entry.prefix];
+        }
+        frm_off += str_len;
+        if (key < table->nentries - 1 && !table_is_full)
+            table->entries[table->nentries - 1].suffix = entry.suffix;
+    }
+    free(table);
+    if (key == stop)
+        read(gif->fd, &sub_len, 1); /* Must be zero! */
+    lseek(gif->fd, end, SEEK_SET);
+    return 0;
+}
+
+/* Read image.
+ * Return 0 on success or -1 on out-of-memory (w.r.t. LZW code table). */
+static int
+read_image(gd_GIF *gif)
+{
+    uint8_t fisrz;
+    int interlace;
+
+    /* Image Descriptor. */
+    gif->fx = read_num(gif->fd);
+    gif->fy = read_num(gif->fd);
+    gif->fw = read_num(gif->fd);
+    gif->fh = read_num(gif->fd);
+    read(gif->fd, &fisrz, 1);
+    interlace = fisrz & 0x40;
+    /* Ignore Sort Flag. */
+    /* Local Color Table? */
+    if (fisrz & 0x80) {
+        /* Read LCT */
+        gif->lct.size = 1 << ((fisrz & 0x07) + 1);
+        read(gif->fd, gif->lct.colors, 3 * gif->lct.size);
+        gif->palette = &gif->lct;
+    } else
+        gif->palette = &gif->gct;
+    /* Image Data. */
+    return read_image_data(gif, interlace);
+}
+
+static void
+render_frame_rect(gd_GIF *gif, uint8_t *buffer)
+{
+    int i, j, k;
+    uint8_t index, *color;
+    i = gif->fy * gif->width + gif->fx;
+    for (j = 0; j < gif->fh; j++) {
+        for (k = 0; k < gif->fw; k++) {
+            index = gif->frame[(gif->fy + j) * gif->width + gif->fx + k];
+            color = &gif->palette->colors[index*3];
+            if (!gif->gce.transparency || index != gif->gce.tindex)
+                memcpy(&buffer[(i+k)*3], color, 3);
+        }
+        i += gif->width;
+    }
+}
+
+static void
+dispose(gd_GIF *gif)
+{
+    int i, j, k;
+    uint8_t *bgcolor;
+    switch (gif->gce.disposal) {
+    case 2: /* Restore to background color. */
+        bgcolor = &gif->palette->colors[gif->bgindex*3];
+        i = gif->fy * gif->width + gif->fx;
+        for (j = 0; j < gif->fh; j++) {
+            for (k = 0; k < gif->fw; k++)
+                memcpy(&gif->canvas[(i+k)*3], bgcolor, 3);
+            i += gif->width;
+        }
+        break;
+    case 3: /* Restore to previous, i.e., don't update canvas.*/
+        break;
+    default:
+        /* Add frame non-transparent pixels to canvas. */
+        render_frame_rect(gif, gif->canvas);
+    }
+}
+
+/* Return 1 if got a frame; 0 if got GIF trailer; -1 if error. */
+int
+gd_get_frame(gd_GIF *gif)
+{
+    char sep;
+
+    dispose(gif);
+    read(gif->fd, &sep, 1);
+    while (sep != ',') {
+        if (sep == ';')
+            return 0;
+        if (sep == '!')
+            read_ext(gif);
+        else return -1;
+        read(gif->fd, &sep, 1);
+    }
+    if (read_image(gif) == -1)
+        return -1;
+    return 1;
+}
+
+void
+gd_render_frame(gd_GIF *gif, uint8_t *buffer)
+{
+    memcpy(buffer, gif->canvas, gif->width * gif->height * 3);
+    render_frame_rect(gif, buffer);
+}
+
+int
+gd_is_bgcolor(gd_GIF *gif, uint8_t color[3])
+{
+    return !memcmp(&gif->palette->colors[gif->bgindex*3], color, 3);
+}
+
+void
+gd_rewind(gd_GIF *gif)
+{
+    lseek(gif->fd, gif->anim_start, SEEK_SET);
+}
+
+void
+gd_close_gif(gd_GIF *gif)
+{
+    close(gif->fd);
+    free(gif);
+}
diff --git a/gifdec.h b/gifdec.h
new file mode 100644
index 0000000..2bbc9f5
--- /dev/null
+++ b/gifdec.h
@@ -0,0 +1,56 @@
+#ifndef GIFDEC_H
+#define GIFDEC_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct gd_Palette {
+    int size;
+    uint8_t colors[0x100 * 3];
+} gd_Palette;
+
+typedef struct gd_GCE {
+    uint16_t delay;
+    uint8_t tindex;
+    uint8_t disposal;
+    int input;
+    int transparency;
+} gd_GCE;
+
+typedef struct gd_GIF {
+    int fd;
+    off_t anim_start;
+    uint16_t width, height;
+    uint16_t depth;
+    uint16_t loop_count;
+    gd_GCE gce;
+    gd_Palette *palette;
+    gd_Palette lct, gct;
+    void (*plain_text)(
+        struct gd_GIF *gif, uint16_t tx, uint16_t ty,
+        uint16_t tw, uint16_t th, uint8_t cw, uint8_t ch,
+        uint8_t fg, uint8_t bg
+    );
+    void (*comment)(struct gd_GIF *gif);
+    void (*application)(struct gd_GIF *gif, char id[8], char auth[3]);
+    uint16_t fx, fy, fw, fh;
+    uint8_t bgindex;
+    uint8_t *canvas, *frame;
+} gd_GIF;
+
+gd_GIF *gd_open_gif(const char *fname);
+int gd_get_frame(gd_GIF *gif);
+void gd_render_frame(gd_GIF *gif, uint8_t *buffer);
+int gd_is_bgcolor(gd_GIF *gif, uint8_t color[3]);
+void gd_rewind(gd_GIF *gif);
+void gd_close_gif(gd_GIF *gif);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* GIFDEC_H */
diff --git a/psplash-alive.c b/psplash-alive.c
new file mode 100644
index 0000000..aa6ca26
--- /dev/null
+++ b/psplash-alive.c
@@ -0,0 +1,212 @@
+/*
+ *  pslash - a lightweight framebuffer splashscreen for embedded devices.
+ *
+ *  Copyright (c) 2020 Tano Systems LLC, Anton Kikin <a.kikin@tano-systems.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ */
+
+#include "psplash.h"
+#include "psplash-fb.h"
+#include "psplash-config.h"
+
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+
+#include "gifdec.h"
+
+struct frame
+{
+	uint8_t *data;
+	unsigned int delay_ms;
+	struct frame *next;
+};
+
+static struct frame *frames = NULL;
+static struct frame *frames_head = NULL;
+
+static gd_GIF *gif = NULL;
+
+#define PSPLASH_ALIVE_IMAGE "/usr/share/psplash.gif"
+
+int psplash_alive_load(void)
+{
+	gif = gd_open_gif(PSPLASH_ALIVE_IMAGE);
+	if (!gif) {
+      	fprintf(stderr, "alive: Can't open file \"%s\"\n", PSPLASH_ALIVE_IMAGE);
+		return -1;
+	}
+
+#if DEBUG
+	fprintf(stderr, "alive: Loaded GIF from file \"%s\" (width = %d, height = %d)\n",
+		PSPLASH_ALIVE_IMAGE, gif->width, gif->height);
+#endif
+
+	return 0;
+}
+
+int psplash_alive_init(void)
+{
+	int frames_num = 0;
+
+	if (!gif)
+		return 0;
+
+	while (gd_get_frame(gif))
+	{
+		struct frame *f;
+
+		++frames_num;
+
+		f = calloc(1, sizeof(struct frame));
+		if (!f)
+		{
+			fprintf(stderr,
+				"alive: Failed to allocate memory for frame #%d structure\n",
+				frames_num);
+			return -1;
+		}
+
+		/*
+		 * 24-bit RGB values:
+		 *   [0] = R (8 bit)
+		 *   [1] = G (8 bit)
+		 *   [2] = B (8 bit)
+		 */
+		f->data = calloc(1, 3 * gif->width * gif->height);
+		if (!f->data)
+		{
+			fprintf(stderr,
+				"alive: Failed to allocate memory for frame #%d data\n",
+				frames_num);
+			free(f);
+			return -1;
+		}
+
+		/* GCE delay is in hundreths of a second */
+		f->delay_ms = gif->gce.delay * 10;
+
+#if DEBUG
+		fprintf(stderr, "alive: Frame #%d: duration %u ms\n", frames_num, f->delay_ms);
+#endif
+
+		// Ensure that we don't end up in an infinite loop that rerenders rendered frames.
+		f->next = NULL;
+
+		gd_render_frame(gif, f->data);
+
+		if (frames)
+			frames->next = f;
+		else
+			frames_head = f;
+
+		frames = f;
+	}
+
+#if DEBUG
+	fprintf(stderr, "alive: Read %d frame(s)\n", frames_num);
+#endif
+
+	return 0;
+}
+
+unsigned int psplash_alive_frame_duration_ms(void)
+{
+	if (!frames_head)
+		return 0;
+
+	return frames_head->delay_ms;
+}
+
+static void psplash_alive_draw_frame(
+	PSplashFB *fb,
+	uint8_t *data,
+	int width,
+	int height,
+	int x,
+	int y
+)
+{
+	int dx;
+	int dy;
+
+	uint8_t *color = data;
+
+	for (dy = 0; dy < height; dy++)
+	{
+		for (dx = 0; dx < width; dx++)
+		{
+			if (!gd_is_bgcolor(gif, color))
+			{
+				psplash_fb_plot_pixel(fb, x + dx, y + dy,
+					color[0], color[1], color[2]);
+			}
+
+			color += 3;
+		}
+	}
+}
+
+int psplash_alive_frame_render(PSplashFB *fb)
+{
+	if (!frames_head)
+		return 0;
+
+	psplash_alive_draw_frame(
+		fb,
+		frames_head->data,
+		gif->width,
+		gif->height,
+		fb->width / 2 - gif->width / 2,
+		fb->height / 2 - gif->height / 2
+	);
+
+	return 0;
+}
+
+void psplash_alive_frame_next(void)
+{
+	/* Next frame */
+	if (frames_head)
+		frames_head = frames_head->next;
+}
+int psplash_alive_frame_has_next(void)
+{
+	return frames_head ? 1 : 0;
+}
+
+int psplash_alive_destroy(void)
+{
+	if (frames_head)
+	{
+		struct frame *f = frames_head;
+
+		do
+		{
+			struct frame *next = f->next;
+
+			if (f->data)
+				free(f->data);
+
+			free(f);
+
+			f = next;
+
+		} while(f != frames_head);
+	}
+
+	if (gif)
+		gd_close_gif(gif);
+
+	return 0;
+}
+
+#endif
diff --git a/psplash-alive.h b/psplash-alive.h
new file mode 100644
index 0000000..599579d
--- /dev/null
+++ b/psplash-alive.h
@@ -0,0 +1,66 @@
+/*
+ *  pslash - a lightweight framebuffer splashscreen for embedded devices.
+ *
+ *  Copyright (c) 2020 Tano Systems LLC, Anton Kikin <a.kikin@tano-systems.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ */
+
+#ifndef _HAVE_PSPLASH_ALIVE_H
+#define _HAVE_PSPLASH_ALIVE_H
+
+#include "psplash-fb.h"
+
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+
+int psplash_alive_load(void);
+int psplash_alive_init(void);
+unsigned int psplash_alive_frame_duration_ms(void);
+int psplash_alive_frame_render(PSplashFB *fb);
+void psplash_alive_frame_next(void);
+int psplash_alive_frame_has_next(void);
+int psplash_alive_destroy(void);
+
+#else
+
+static inline int psplash_alive_load(void)
+{
+	return 0;
+}
+
+static inline int psplash_alive_init(void)
+{
+	return 0;
+}
+
+static unsigned int psplash_alive_frame_duration_ms(void)
+{
+	return 0;
+}
+
+static inline int psplash_alive_frame_render(PSplashFB *fb)
+{
+	return 0;
+}
+
+static inline void psplash_alive_frame_next(void)
+{
+}
+
+static inline int psplash_alive_destroy(void)
+{
+	return 0;
+}
+
+#endif
+
+#endif
diff --git a/psplash-fb.c b/psplash-fb.c
index 2babb5f..22180f8 100644
--- a/psplash-fb.c
+++ b/psplash-fb.c
@@ -339,7 +339,7 @@ psplash_fb_new (int angle, int fbdev_id)
 
 #define OFFSET(fb,x,y) (((y) * (fb)->stride) + ((x) * ((fb)->bpp >> 3)))
 
-static inline void
+void
 psplash_fb_plot_pixel (PSplashFB    *fb,
 		       int          x,
 		       int          y,
diff --git a/psplash-fb.h b/psplash-fb.h
index 16e2b20..978bdab 100644
--- a/psplash-fb.h
+++ b/psplash-fb.h
@@ -55,6 +55,14 @@ psplash_fb_destroy (PSplashFB *fb);
 PSplashFB*
 psplash_fb_new (int angle, int fbdev_id);
 
+void
+psplash_fb_plot_pixel (PSplashFB    *fb,
+		       int          x,
+		       int          y,
+		       uint8        red,
+		       uint8        green,
+		       uint8        blue);
+
 void
 psplash_fb_draw_rect (PSplashFB    *fb, 
 		      int          x, 
diff --git a/psplash.c b/psplash.c
index ee1af6b..011e3ab 100644
--- a/psplash.c
+++ b/psplash.c
@@ -130,94 +130,162 @@ parse_command (PSplashFB *fb, char *string)
     {
       return 1;
     }
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+	else if (!strcmp(command, "ALIVE"))
+	{
+    psplash_alive_frame_render(fb);
+    psplash_alive_frame_next();
+	}
+#endif
 
   psplash_fb_flip(fb, 0);
   return 0;
 }
 
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+
+static inline int tm1_ge_tm2(const struct timespec *tm1, const struct timespec *tm2)
+{
+	if (tm1->tv_sec == tm2->tv_sec)
+		return tm1->tv_nsec >= tm2->tv_nsec;
+	else
+		return tm1->tv_sec >= tm2->tv_sec;
+}
+
+static inline int tm_add_ms(struct timespec *tm, unsigned int ms)
+{
+	tm->tv_sec += ms / 1000;
+	tm->tv_nsec += (ms % 1000) * 1000000UL;
+  if (tm->tv_nsec >= 1000000000UL)
+  {
+		tm->tv_sec++;
+		tm->tv_nsec -= 1000000000UL;
+ 	}
+}
+
+static inline void tm_diff(
+	const struct timespec *tm2,
+	const struct timespec *tm1,
+	struct timeval *tmv
+)
+{
+	unsigned long long usec1 = tm1->tv_sec * 1000000UL + (tm1->tv_nsec / 1000UL);
+	unsigned long long usec2 = tm2->tv_sec * 1000000UL + (tm2->tv_nsec / 1000UL);
+	if (usec2 > usec1)
+ 	{
+		unsigned long long usec_diff = usec2 - usec1;
+
+		tmv->tv_sec  = usec_diff / 1000000UL;
+		tmv->tv_usec = usec_diff % 1000000UL;
+	}
+	else
+	{
+		tmv->tv_sec  = 0;
+		tmv->tv_usec = 0;
+ 	}
+}
+#endif
+
 void 
 psplash_main (PSplashFB *fb, int pipe_fd, int timeout) 
 {
-  int            err;
-  ssize_t        length = 0;
-  fd_set         descriptors;
-  struct timeval tv;
-  char          *end;
+	int            err;
+	ssize_t        length = 0;
+	fd_set         descriptors;
+	struct timeval tv;
+	char          *end;
   char          *cmd;
-  char           command[2048];
+	char           command[2048];
+
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+	struct timespec tm_current;
+	struct timespec tm_next_frame;
+	struct timespec tm_timeout;
+  clock_gettime(CLOCK_MONOTONIC, &tm_current);
+  tm_next_frame = tm_timeout = tm_current;
+	tm_add_ms(&tm_timeout, timeout * 1000);
+#endif
+	while (1)
+	{
+		FD_ZERO(&descriptors);
+		FD_SET(pipe_fd, &descriptors);
+		end = &command[length];
 
-  tv.tv_sec = timeout;
-  tv.tv_usec = 0;
 
-  FD_ZERO(&descriptors);
-  FD_SET(pipe_fd, &descriptors);
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+    if (psplash_alive_frame_has_next()) {
+      clock_gettime(CLOCK_MONOTONIC, &tm_current);
 
-  end = command;
+      if (tm1_ge_tm2(&tm_current, &tm_next_frame))
+      {
+        tm_add_ms(&tm_next_frame, psplash_alive_frame_duration_ms());
+        psplash_alive_frame_render(fb);
+        psplash_alive_frame_next();
+        psplash_fb_flip(fb, 0);
+      }
 
-  while (1) 
-    {
-      if (timeout != 0) 
-	err = select(pipe_fd+1, &descriptors, NULL, NULL, &tv);
-      else
-	err = select(pipe_fd+1, &descriptors, NULL, NULL, NULL);
-      
-      if (err <= 0) 
-	{
-	  /*
-	  if (errno == EINTR)
-	    continue;
-	  */
-	  return;
-	}
-      
-      length += read (pipe_fd, end, sizeof(command) - (end - command));
+      tm_diff(&tm_next_frame, &tm_current, &tv);
+    err = select(pipe_fd + 1, &descriptors, NULL, NULL, &tv);
+    } else {
+#endif
+    if (timeout != 0) 
+	    err = select(pipe_fd+1, &descriptors, NULL, NULL, &tv);
+    else
+	    err = select(pipe_fd+1, &descriptors, NULL, NULL, NULL);
 
-      if (length == 0) 
-	{
-	  /* Reopen to see if there's anything more for us */
-	  close(pipe_fd);
-	  pipe_fd = open(PSPLASH_FIFO,O_RDONLY|O_NONBLOCK);
-	  goto out;
-	}
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+    }
+#endif
+
+    if (err == 0) /* timeout */
+      continue;
 
-      cmd = command;
-      do {
-	int cmdlen;
-        char *cmdend = memchr(cmd, '\n', length);
-
-        /* Replace newlines with string termination */
-        if (cmdend)
-            *cmdend = '\0';
-
-        cmdlen = strnlen(cmd, length);
-
-        /* Skip string terminations */
-	if (!cmdlen && length)
-          {
-            length--;
-            cmd++;
-	    continue;
-          }
-
-	if (parse_command(fb, cmd))
-	  return;
-
-	length -= cmdlen;
-	cmd += cmdlen;
-      } while (length);
-
-    out:
-      end = &command[length];
-    
-      tv.tv_sec = timeout;
-      tv.tv_usec = 0;
-      
-      FD_ZERO(&descriptors);
-      FD_SET(pipe_fd,&descriptors);
+    if (err <= 0) 
+    {
+      /*
+      if (errno == EINTR)
+        continue;
+      */
+      return;
+    }
+        
+    length += read (pipe_fd, end, sizeof(command) - (end - command));
+
+    if (length == 0) {
+      /* Reopen to see if there's anything more for us */
+      close(pipe_fd);
+      pipe_fd = open(PSPLASH_FIFO,O_RDONLY|O_NONBLOCK);
+      continue;
     }
 
-  return;
-}
+    cmd = command;
+    do {
+      int cmdlen;
+      char *cmdend = memchr(cmd, '\n', length);
+
+      /* Replace newlines with string termination */
+      if (cmdend)
+          *cmdend = '\0';
+
+      cmdlen = strnlen(cmd, length);
+
+      /* Skip string terminations */
+      if (!cmdlen && length) {
+          length--;
+          cmd++;
+          continue;
+      }
+
+	    if (parse_command(fb, cmd))
+	      return;
+
+	    length -= cmdlen;
+	    cmd += cmdlen;
+    } while (length);
+  }
+ 
+   return;
+ }
 
 int 
 main (int argc, char** argv) 
@@ -259,6 +327,11 @@ main (int argc, char** argv)
       exit(-1);
   }
 
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+	if (psplash_alive_load())
+		exit(-1);
+#endif
+
   rundir = getenv("PSPLASH_FIFO_DIR");
 
   if (!rundir)
@@ -300,6 +373,7 @@ main (int argc, char** argv)
   psplash_fb_draw_rect (fb, 0, 0, fb->width, fb->height,
                         PSPLASH_BACKGROUND_COLOR);
 
+#ifndef PSPLASH_ENABLE_ANIMATED_GIF
   /* Draw the Poky logo  */
   psplash_fb_draw_image (fb, 
 			 (fb->width  - POKY_IMG_WIDTH)/2, 
@@ -340,9 +414,18 @@ main (int argc, char** argv)
    * update.
    */
   psplash_fb_flip(fb, 1);
+#endif
+
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+	psplash_alive_init();
+#endif
 
   psplash_main (fb, pipe_fd, 0);
 
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+	psplash_alive_destroy();
+#endif
+
   psplash_fb_destroy (fb);
 
  fb_fail:
diff --git a/psplash.h b/psplash.h
index 1c42ec7..37a0a12 100644
--- a/psplash.h
+++ b/psplash.h
@@ -35,6 +35,10 @@
 #include <termios.h>
 #include <unistd.h>
 
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+#include <time.h>
+#endif
+
 typedef uint8_t  uint8;
 typedef uint16_t uint16;
 typedef int            bool;
@@ -81,5 +85,8 @@ PSplashFont;
 
 #include "psplash-fb.h"
 #include "psplash-console.h"
+#ifdef PSPLASH_ENABLE_ANIMATED_GIF
+#include "psplash-alive.h"
+#endif
 
 #endif
-- 
2.33.1

